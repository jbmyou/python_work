# 엑셀 읽을 때 기본스타일 경고 없애기
import warnings
warnings.simplefilter("ignore")

-----dtype-------------------------------------------------------------------

debt_dtype = {'채무자키':str, '타채무자키':str, '담당자키':str}
account_dtype = {'채무자키':str, '계좌키':str, '타채무자키':str}
grt_dtype = {'채무자키':str, '계좌키':str, '타채무자키':str, '보증인키':str}
rehabilitation_dtype = {'채무자키':str, '계좌키':str, '분납키':str, '사건키':str}
credit_dtype = {'채무자키':str, '계좌키':str, '보증인키':str, '심의차수':str, '변제금\n수취계좌':str}
event_dtype = {'채무자키':str, '법조치키':str, '계좌키':str, '관련법조치키':str, '법취하키':str, '타법조치키':str, '타채무자키':str, '관할법원코드':str}
memo_dtype = {'채무자키' : str, '메모키':str}
deposit_dtype = {'채무자키' : str, '입금키':str, '계좌키':str, '입금계좌번호':str, '계좌번호':str, '타입금키':str, '타채무자키':str, '보증인키':str}


-----정규식 표현--------------------------------------------------------------
-----필수항목4------

p_basic = re.compile(r'(\d{8})\s?(\D+.+)('+docu_kind+r')')

### 채무자키 match
p_key = re.compile(r"[\d]{8}(?!\d)") #match

p_key.match(f).group(1)

### 문서구분
# 관련된 거 전부
docu_kind = '원인서류|양도통지서|양통|승계|판결|명령|이행권고|화해권고|채권압류|압류|타채|결정|등본|초본|등,초본|등초본|외국인|개회|회생|개인회생|신복|회복|신용회복|파산|재산조사|등기부등본|[가-힣]{2,}대장'
# 부산 처음 정리했던 거
docu_kind = '원인서류|양도통지서|판결문|지급명령|이행권고|화해권고|타채|결정문|등본|초본|외국인증명|개회|신복|파산'
# 최종 결정된 거
docu_kind = '원인서류|양도통지서|집행권원|강제집행|등본|초본|외국인|개회|신복|파산|재산조사|기타'
# 공백, 차수, 재도 고려
docu_kind = r'원인서류|양도통지서[\s]?[\d]?[차]?|집행권원[\s]?[재]?[도]?|집행권원 재도|집행권원재도|강제집행|등본|초본|외국인증명|개인회생|신용회복|파산|재산조사|기타'
p_docu = re.compile(docu_kind)


### 사건번호
p_event = re.compile(r"[\D]([\d]{4}[ㄱ-ㅎ가-힣]{1,3}[0-9]+)")

p_event.search(f).group(1) # group()는 [\D]까지 따라와버려

### 날짜
p_day = re.compile(r"(?<=\D)\d{2}(\d{6})") #후방탐색 있으니 채무자키랑은 중복 안되고, 파일명 바꾼거라면 숫자만 8자리 이상 나오는 경우도 없을 거다.(사건번호에 혹시?)


-----채무자키 대체------
### 사업자/주민번호
p_rgt1 = re.compile(r'((?<=\D)|\b)(\d{3})-?(\d{2})-?(\d{5})((?=\D)|\b)') # 10자리
p_rgt2 = re.compile(r'((?<=\D)|\b)(\d{6})-?(\d{7})((?=\D)|\b)') # 13자리

### 관리자키  match
p_admin = re.compile(r'((?<=\D)|\b)(\d{4})-?(\d{6})((?=\D)|\b)') # 10자리

-----넘버링------
p_numbering = r'(_[(][\d]{1,2}[)]|_[\d]{1,2}|[\s]*[(][\d]{1,2}[)][\s]*|[\s]+[\d]{1,2}[\s]*)$'
temp = re.sub(p_numbering, "", stem) #모든 넘버링 제거

-----기타------
# 확장자
p_extension = re.compile('(jpeg|jpg|bmp|gif|pdf|png|tif|xps)$', re.I)
p_extension.search(f) # $과 match의 조합은 불가함

p_extension = re.compile('.jpeg|.jpg|.bmp|.gif|.pdf|.png|.tif|.xps', re.I)
p_extension.match(ext)


# 관리 제외(채무상태)
p_out = re.compile('개인회생\(면책\)|파산\(면책\)|환매|매각|종결')
p_out.match()


-----import--------------------------------------------------------------
import os, sys
import shutil
import pandas as pd
from tqdm import tqdm      
import re
from pathlib import Path
import traceback
from os.path import join
import file_function as ff
import time
from datetime import datetime

-----except--------------------------------------------------------------
        except Exception as e:
            print("===================================")
            print(datetime.today().strftime("%H:%M:%S"))
            print(f, e.__class__, e, sep=" : ")
            print(traceback.format_exc())
            error.append([f, e.__class__, e])
            continue # 반복문 계속 돌아


-----기본 작성--------------------------------------------------------------
if (p_extension.search(f)==None) or (re.match("[~$]", f) != None) :


path = r'C:\Users\jbmyo\Desktop\test'
file_list = [f.name for f in os.scandir(path) if f.is_file()]

#p_extension = re.compile('(jpeg|jpg|bmp|gif|pdf|png|tif)$', re.I)
#file_list = [f.name for f in os.scandir(path) if f.is_file() and (re.search(p_extension, f.name))]

log_path = r'D:\0.전산\1.진행중과업\파일서버개편\log'
log = []
error = []

for f in tqdm(file_list, total=len(file_list)) :
    try :
        if f != "Thumbs.db" :
            stem = os.path.splitext(f)[0]
            ext = os.path.splitext(f)[1]
            



            new_name = "_".join(temp) + ext
            log.append(ff.re_name(join(path, f), join(path, new_name)))

    except Exception as e:
        print("===================================")
        print(datetime.today().strftime("%H:%M:%S"))
        print(f, e.__class__, e, sep=" : ")
        print(traceback.format_exc())
        error.append([f, e.__class__, e])
        continue # 반복문 계속 돌아

ff.write_log(log, error, log_path)



-----실수 하기 쉬운 것--------------------------------------------------------------
# 조건을 달아야 예외발생 안함            
if not os.path.exists(dst_dir) :
    os.mkdir(join(path,key))


-----nas 내부 작업용--------------------------------------------------------------

PATH = r'/volume1/스캔파일/새 스캔파일(업로드)'
PATH_HAND = r"/volume1/스캔파일/새 스캔파일(업로드)/수작업"
PATH_LOG_SUCCESS = r'/volume1/스캔파일/스캔파일log/success'
PATH_LOG_FAIL = r'/volume1/스캔파일/스캔파일log/fail'
PATH_LOG_BASIC_EXCEPT = r'/volume1/스캔파일/스캔파일log/basic_except'
PATH_SERVER = r'/volume1/솔림헬프'
PATH_OUT = r'/volume1/삭제예정파일/관리제외'

# 참조 df
def dict_refer():
    df_c = pd.read_excel(r'/volume1/스캔파일/스캔파일log/project/파일/채무자조회.xlsx')
    return dict(map(lambda x : (str(x[1].채무자키),[x[1].매각사구분, x[1].채무상태]), df_c.iterrows()))
dict_refer = dict_refer()


------------------------------------------------------
new_name = "_".join(filter(lambda x :bool(x), dict.values()))


-----------------------------------------------------------------

def 파일명(폴더:str, 키워드:str) :
    file_list = os.listdir(폴더)
    account_filename = [file for file in file_list if re.search(키워드, file)]
    if len(account_filename) == 1 :
        return join(폴더,account_filename[0])
    else :
        print("해당 키워드가 들어간 파일이 하나가 아닙니다.")